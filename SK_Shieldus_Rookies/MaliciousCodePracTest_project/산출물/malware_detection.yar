/*
 * Universal PE Malware Detection YARA Rules
 * Based on common malware patterns and behaviors
 * Universal version - language independent
 * Written: 2024
 */

import "pe"

rule Malware_Registry_Manipulation {
    meta:
        description = "Registry manipulation for persistence"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Persistence"
    
    strings:
        // Registry manipulation patterns
        $reg_run = "Software\\Microsoft\\Windows\\CurrentVersion\\Run" ascii
        $reg_autorun = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" ascii
        $reg_hklm = "HKEY_LOCAL_MACHINE" ascii
        $reg_hkcu = "HKEY_CURRENT_USER" ascii
        $reg_createkey = "CreateKeyEx" ascii
        $reg_setvalue = "SetValueEx" ascii
        $reg_closekey = "CloseKey" ascii
        $reg_openkey = "OpenKeyEx" ascii
        $reg_deletekey = "DeleteKey" ascii
        
        // Persistence keywords (common patterns)
        $persistence1 = "Updater" ascii
        $persistence2 = "Service" ascii
        $persistence3 = "Helper" ascii
        $persistence4 = "Manager" ascii
        $persistence5 = "Monitor" ascii
        $persistence6 = "Agent" ascii
        $persistence7 = "Client" ascii
        $persistence8 = "Daemon" ascii
        
        // Suspicious registry paths
        $suspicious_path1 = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies" ascii
        $suspicious_path2 = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer" ascii
        $suspicious_path3 = "Software\\Microsoft\\Windows\\CurrentVersion\\Shell" ascii
        
    condition:
        pe.is_pe and
        (
            (2 of ($reg_run, $reg_autorun, $reg_hklm, $reg_hkcu)) and
            (2 of ($reg_createkey, $reg_setvalue, $reg_closekey, $reg_openkey, $reg_deletekey)) and
            (1 of ($persistence1, $persistence2, $persistence3, $persistence4, $persistence5, $persistence6, $persistence7, $persistence8))
        ) or
        (
            (1 of ($suspicious_path1, $suspicious_path2, $suspicious_path3)) and
            (2 of ($reg_createkey, $reg_setvalue, $reg_deletekey))
        )
}

rule Malware_PowerShell_Execution {
    meta:
        description = "PowerShell-based malicious script execution"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Script Execution"
    
    strings:
        // PowerShell execution patterns
        $ps_exec = "powershell.exe" ascii
        $ps_bypass = "ExecutionPolicy Bypass" ascii
        $ps_hidden = "WindowStyle Hidden" ascii
        $ps_file = "-File" ascii
        $ps_command = "powershell.exe -ExecutionPolicy Bypass" ascii
        $ps_encoded = "-EncodedCommand" ascii
        $ps_encoded2 = "-Enc" ascii
        $ps_noprofile = "-NoProfile" ascii
        $ps_nologo = "-NoLogo" ascii
        
        // Common script file patterns
        $ps_script1 = ".ps1" ascii
        $ps_script2 = "script" ascii
        $ps_script3 = "temp" ascii
        $ps_script4 = "tmp" ascii
        
        // Malicious PowerShell commands
        $ps_malicious1 = "Get-ChildItem -Path" ascii
        $ps_malicious2 = "whoami /all" ascii
        $ps_malicious3 = "Get-NetIPAddress" ascii
        $ps_malicious4 = "Stop-Process -Force" ascii
        $ps_malicious5 = "Register-ScheduledTask" ascii
        $ps_malicious6 = "Invoke-Expression" ascii
        $ps_malicious7 = "IEX" ascii
        $ps_malicious8 = "DownloadString" ascii
        $ps_malicious9 = "WebClient" ascii
        $ps_malicious10 = "Net.WebClient" ascii
        
    condition:
        pe.is_pe and
        (
            (2 of ($ps_exec, $ps_bypass, $ps_hidden, $ps_encoded, $ps_encoded2, $ps_noprofile, $ps_nologo)) and
            (1 of ($ps_script1, $ps_script2, $ps_script3, $ps_script4))
        ) or
        (
            (1 of ($ps_command, $ps_file, $ps_encoded)) and
            (2 of ($ps_malicious1, $ps_malicious2, $ps_malicious3, $ps_malicious4, $ps_malicious5, $ps_malicious6, $ps_malicious7, $ps_malicious8, $ps_malicious9, $ps_malicious10))
        )
}

rule Malware_System_Information_Gathering {
    meta:
        description = "System information gathering malware"
        author = "Security Analyst"
        date = "2024"
        severity = "MEDIUM"
        category = "Information Gathering"
    
    strings:
        // System information gathering commands
        $sysinfo1 = "systeminfo" ascii
        $sysinfo2 = "net user" ascii
        $sysinfo3 = "ipconfig /all" ascii
        $sysinfo4 = "tasklist" ascii
        $sysinfo5 = "driverquery" ascii
        $sysinfo6 = "wmic product get name,version" ascii
        $sysinfo7 = "netstat -ano" ascii
        $sysinfo8 = "whoami" ascii
        $sysinfo9 = "hostname" ascii
        $sysinfo10 = "ver" ascii
        $sysinfo11 = "dir" ascii
        $sysinfo12 = "type" ascii
        
        // Information gathering functions
        $info_func1 = "platform.node()" ascii
        $info_func2 = "socket.gethostbyname" ascii
        $info_func3 = "platform.platform()" ascii
        $info_func4 = "platform.processor()" ascii
        $info_func5 = "os.getenv" ascii
        $info_func6 = "os.environ" ascii
        $info_func7 = "GetComputerName" ascii
        $info_func8 = "GetUserName" ascii
        
        // Common output file patterns
        $file_save1 = "info.txt" ascii
        $file_save2 = "results.txt" ascii
        $file_save3 = "output.txt" ascii
        $file_save4 = "data.txt" ascii
        $file_save5 = "log.txt" ascii
        $file_save6 = "report.txt" ascii
        
    condition:
        pe.is_pe and
        (
            (3 of ($sysinfo1, $sysinfo2, $sysinfo3, $sysinfo4, $sysinfo5, $sysinfo6, $sysinfo7, $sysinfo8, $sysinfo9, $sysinfo10, $sysinfo11, $sysinfo12)) and
            (1 of ($info_func1, $info_func2, $info_func3, $info_func4, $info_func5, $info_func6, $info_func7, $info_func8))
        ) or
        (
            (2 of ($file_save1, $file_save2, $file_save3, $file_save4, $file_save5, $file_save6)) and
            (2 of ($sysinfo1, $sysinfo2, $sysinfo3, $sysinfo4, $sysinfo5, $sysinfo6))
        )
}

rule Malware_Process_Control {
    meta:
        description = "Process control and termination malware"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Process Control"
    
    strings:
        // Process control patterns
        $proc_control1 = "Stop-Process -Force" ascii
        $proc_control2 = "Get-Process -Name" ascii
        $proc_control3 = "taskkill" ascii
        $proc_control4 = "TerminateProcess" ascii
        $proc_control5 = "psutil.Process" ascii
        $proc_control6 = "parent_process" ascii
        $proc_control7 = "CreateProcess" ascii
        $proc_control8 = "ShellExecute" ascii
        
        // Common target processes
        $target_proc1 = "notepad.exe" ascii
        $target_proc2 = "excel.exe" ascii
        $target_proc3 = "word.exe" ascii
        $target_proc4 = "chrome.exe" ascii
        $target_proc5 = "firefox.exe" ascii
        $target_proc6 = "explorer.exe" ascii
        
        // Anti-analysis patterns
        $anti_analysis1 = "check_parent_process" ascii
        $anti_analysis2 = "parent_name" ascii
        $anti_analysis3 = "sys.exit(0)" ascii
        $anti_analysis4 = "IsDebuggerPresent" ascii
        $anti_analysis5 = "CheckRemoteDebuggerPresent" ascii
        $anti_analysis6 = "VirtualMachine" ascii
        
    condition:
        pe.is_pe and
        (
            (2 of ($proc_control1, $proc_control2, $proc_control3, $proc_control4, $proc_control5, $proc_control6, $proc_control7, $proc_control8)) and
            (1 of ($target_proc1, $target_proc2, $target_proc3, $target_proc4, $target_proc5, $target_proc6))
        ) or
        (
            (2 of ($anti_analysis1, $anti_analysis2, $anti_analysis3, $anti_analysis4, $anti_analysis5, $anti_analysis6)) and
            (1 of ($proc_control1, $proc_control2, $proc_control3, $proc_control4))
        )
}

rule Malware_Network_Manipulation {
    meta:
        description = "Network configuration manipulation malware"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Network Manipulation"
    
    strings:
        // Network configuration manipulation
        $net_config1 = "ProxyEnabled" ascii
        $net_config2 = "ProxyServer" ascii
        $net_config3 = "HomePage" ascii
        $net_config4 = "DefaultConnectionSettings" ascii
        $net_config5 = "InternetSettings" ascii
        $net_config6 = "WinInet" ascii
        
        // Firewall bypass patterns
        $firewall1 = "FirewallPolicy" ascii
        $firewall2 = "AuthorizedApplications" ascii
        $firewall3 = "WindowsFirewall" ascii
        $firewall4 = "netsh firewall" ascii
        $firewall5 = "netsh advfirewall" ascii
        
        // Network information gathering
        $net_info1 = "Get-NetIPAddress" ascii
        $net_info2 = "InterfaceAlias" ascii
        $net_info3 = "AddressFamily" ascii
        $net_info4 = "Get-NetAdapter" ascii
        $net_info5 = "Get-NetRoute" ascii
        
        // Suspicious network patterns
        $suspicious_net1 = "127.0.0.1" ascii
        $suspicious_net2 = "localhost" ascii
        $suspicious_net3 = "tcp://" ascii
        $suspicious_net4 = "http://" ascii
        $suspicious_net5 = "https://" ascii
        
    condition:
        pe.is_pe and
        (
            (2 of ($net_config1, $net_config2, $net_config3, $net_config4, $net_config5, $net_config6)) and
            (1 of ($firewall1, $firewall2, $firewall3, $firewall4, $firewall5))
        ) or
        (
            (2 of ($net_info1, $net_info2, $net_info3, $net_info4, $net_info5)) and
            (1 of ($suspicious_net1, $suspicious_net2, $suspicious_net3, $suspicious_net4, $suspicious_net5))
        )
}

rule Malware_Scheduled_Task_Creation {
    meta:
        description = "Scheduled task creation for persistence"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Persistence"
    
    strings:
        // Scheduled task creation patterns
        $task1 = "New-ScheduledTaskAction" ascii
        $task2 = "New-ScheduledTaskTrigger" ascii
        $task3 = "Register-ScheduledTask" ascii
        $task4 = "AtStartup" ascii
        $task5 = "AtLogOn" ascii
        $task6 = "schtasks" ascii
        $task7 = "CreateTask" ascii
        $task8 = "TaskScheduler" ascii
        
        // Common task names
        $task_name1 = "Updater" ascii
        $task_name2 = "Service" ascii
        $task_name3 = "Helper" ascii
        $task_name4 = "Manager" ascii
        $task_name5 = "Monitor" ascii
        $task_name6 = "Agent" ascii
        
        // Suspicious task descriptions
        $task_desc1 = "System Update" ascii
        $task_desc2 = "Windows Update" ascii
        $task_desc3 = "Security Update" ascii
        $task_desc4 = "Maintenance" ascii
        $task_desc5 = "Background Task" ascii
        
    condition:
        pe.is_pe and
        (
            (3 of ($task1, $task2, $task3, $task4, $task5, $task6, $task7, $task8)) and
            (1 of ($task_name1, $task_name2, $task_name3, $task_name4, $task_name5, $task_name6))
        ) or
        (
            (2 of ($task1, $task2, $task3, $task6)) and
            (1 of ($task_desc1, $task_desc2, $task_desc3, $task_desc4, $task_desc5))
        )
}

rule Malware_Anti_Analysis {
    meta:
        description = "Anti-analysis and sandbox evasion malware"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Anti-Analysis"
    
    strings:
        // Anti-analysis patterns
        $anti_analysis1 = "check_parent_process" ascii
        $anti_analysis2 = "parent_process" ascii
        $anti_analysis3 = "IsDebuggerPresent" ascii
        $anti_analysis4 = "CheckRemoteDebuggerPresent" ascii
        $anti_analysis5 = "VirtualMachine" ascii
        $anti_analysis6 = "Sandbox" ascii
        $anti_analysis7 = "VMware" ascii
        $anti_analysis8 = "VirtualBox" ascii
        $anti_analysis9 = "QEMU" ascii
        $anti_analysis10 = "sys.exit(0)" ascii
        
        // Evasion patterns
        $evasion1 = "DEBUG" ascii
        $evasion2 = "comment" ascii
        $evasion3 = "disabled" ascii
        $evasion4 = "bypass" ascii
        $evasion5 = "skip" ascii
        $evasion6 = "test" ascii
        
        // Common analysis tools
        $analysis_tools1 = "wireshark" ascii
        $analysis_tools2 = "procmon" ascii
        $analysis_tools3 = "regmon" ascii
        $analysis_tools4 = "filemon" ascii
        $analysis_tools5 = "ida" ascii
        $analysis_tools6 = "ollydbg" ascii
        
    condition:
        pe.is_pe and
        (
            (2 of ($anti_analysis1, $anti_analysis2, $anti_analysis3, $anti_analysis4, $anti_analysis5, $anti_analysis6, $anti_analysis7, $anti_analysis8, $anti_analysis9, $anti_analysis10)) and
            (1 of ($evasion1, $evasion2, $evasion3, $evasion4, $evasion5, $evasion6))
        ) or
        (
            (1 of ($anti_analysis3, $anti_analysis4, $anti_analysis5, $anti_analysis6, $anti_analysis7, $anti_analysis8, $anti_analysis9)) and
            (1 of ($analysis_tools1, $analysis_tools2, $analysis_tools3, $analysis_tools4, $analysis_tools5, $analysis_tools6))
        )
}

rule Malware_General_Patterns {
    meta:
        description = "General malware patterns and behaviors"
        author = "Security Analyst"
        date = "2024"
        severity = "MEDIUM"
        category = "General Malware"
    
    strings:
        // Suspicious function calls
        $suspicious1 = "subprocess.run" ascii
        $suspicious2 = "subprocess.Popen" ascii
        $suspicious3 = "os.system" ascii
        $suspicious4 = "os.popen" ascii
        $suspicious5 = "CreateProcess" ascii
        $suspicious6 = "ShellExecute" ascii
        $suspicious7 = "WinExec" ascii
        $suspicious8 = "system" ascii
        
        // File operations
        $file_ops1 = "os.path.join" ascii
        $file_ops2 = "os.path.abspath" ascii
        $file_ops3 = "os.environ" ascii
        $file_ops4 = "os.getpid" ascii
        $file_ops5 = "CreateFile" ascii
        $file_ops6 = "WriteFile" ascii
        $file_ops7 = "ReadFile" ascii
        $file_ops8 = "DeleteFile" ascii
        
        // Network operations
        $net_ops1 = "socket" ascii
        $net_ops2 = "connect" ascii
        $net_ops3 = "send" ascii
        $net_ops4 = "recv" ascii
        $net_ops5 = "HttpSendRequest" ascii
        $net_ops6 = "InternetOpen" ascii
        
        // Registry operations
        $reg_ops1 = "RegOpenKey" ascii
        $reg_ops2 = "RegSetValue" ascii
        $reg_ops3 = "RegCreateKey" ascii
        $reg_ops4 = "RegDeleteKey" ascii
        
    condition:
        pe.is_pe and
        (
            (3 of ($suspicious1, $suspicious2, $suspicious3, $suspicious4, $suspicious5, $suspicious6, $suspicious7, $suspicious8)) and
            (2 of ($file_ops1, $file_ops2, $file_ops3, $file_ops4, $file_ops5, $file_ops6, $file_ops7, $file_ops8))
        ) or
        (
            (2 of ($net_ops1, $net_ops2, $net_ops3, $net_ops4, $net_ops5, $net_ops6)) and
            (2 of ($reg_ops1, $reg_ops2, $reg_ops3, $reg_ops4))
        )
}

rule Malware_High_Confidence {
    meta:
        description = "High confidence malware detection"
        author = "Security Analyst"
        date = "2024"
        severity = "CRITICAL"
        category = "High Confidence Malware"
    
    strings:
        // High-risk pattern combinations
        $high_risk1 = "powershell.exe -ExecutionPolicy Bypass" ascii
        $high_risk2 = "Register-ScheduledTask" ascii
        $high_risk3 = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" ascii
        $high_risk4 = "Stop-Process -Force" ascii
        $high_risk5 = "CreateKeyEx" ascii
        $high_risk6 = "SetValueEx" ascii
        $high_risk7 = "Invoke-Expression" ascii
        $high_risk8 = "DownloadString" ascii
        $high_risk9 = "WebClient" ascii
        $high_risk10 = "IsDebuggerPresent" ascii
        
    condition:
        pe.is_pe and
        (3 of ($high_risk1, $high_risk2, $high_risk3, $high_risk4, $high_risk5, $high_risk6, $high_risk7, $high_risk8, $high_risk9, $high_risk10))
}

// Additional universal rules for better coverage
rule Malware_File_Operations {
    meta:
        description = "Suspicious file operations"
        author = "Security Analyst"
        date = "2024"
        severity = "MEDIUM"
        category = "File Operations"
    
    strings:
        // File manipulation patterns
        $file_ops1 = "CreateFile" ascii
        $file_ops2 = "WriteFile" ascii
        $file_ops3 = "ReadFile" ascii
        $file_ops4 = "DeleteFile" ascii
        $file_ops5 = "MoveFile" ascii
        $file_ops6 = "CopyFile" ascii
        $file_ops7 = "SetFileAttributes" ascii
        $file_ops8 = "GetFileAttributes" ascii
        
        // Suspicious file paths
        $suspicious_path1 = "temp" ascii
        $suspicious_path2 = "tmp" ascii
        $suspicious_path3 = "appdata" ascii
        $suspicious_path4 = "programdata" ascii
        
    condition:
        pe.is_pe and
        (
            (3 of ($file_ops1, $file_ops2, $file_ops3, $file_ops4, $file_ops5, $file_ops6, $file_ops7, $file_ops8)) and
            (1 of ($suspicious_path1, $suspicious_path2, $suspicious_path3, $suspicious_path4))
        )
}

rule Malware_Network_Communication {
    meta:
        description = "Suspicious network communication"
        author = "Security Analyst"
        date = "2024"
        severity = "HIGH"
        category = "Network Communication"
    
    strings:
        // Network communication patterns
        $net_comm1 = "HttpSendRequest" ascii
        $net_comm2 = "InternetOpen" ascii
        $net_comm3 = "InternetConnect" ascii
        $net_comm4 = "socket" ascii
        $net_comm5 = "connect" ascii
        $net_comm6 = "send" ascii
        $net_comm7 = "recv" ascii
        $net_comm8 = "bind" ascii
        $net_comm9 = "listen" ascii
        $net_comm10 = "accept" ascii
        
        // Suspicious network patterns
        $suspicious_net1 = "http://" ascii
        $suspicious_net2 = "https://" ascii
        $suspicious_net3 = "ftp://" ascii
        $suspicious_net4 = "tcp://" ascii
        
    condition:
        pe.is_pe and
        (
            (3 of ($net_comm1, $net_comm2, $net_comm3, $net_comm4, $net_comm5, $net_comm6, $net_comm7, $net_comm8, $net_comm9, $net_comm10)) and
            (1 of ($suspicious_net1, $suspicious_net2, $suspicious_net3, $suspicious_net4))
        )
}
